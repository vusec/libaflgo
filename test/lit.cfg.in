# The `config` variable is defined when this file is parsed
# pylint: disable=undefined-variable
# pyright: reportUndefinedVariable=false

from pathlib import Path

import lit.formats

config.name = "@PROJECT_NAME@"
config.test_format = lit.formats.ShTest(True)

config.test_source_root = "@CMAKE_CURRENT_SOURCE_DIR@"
config.suffixes = [".ll", ".c", ".cpp"]

tools_dir = Path("@LLVM_DIR@").parent / "bin"

config.substitutions.append(("%FileCheck", f"{tools_dir}/FileCheck"))

printer_plugin_path = Path("@PRINTER_PLUGIN_PATH@")
if not printer_plugin_path.is_file():
    print(f"Plugin not found: {printer_plugin_path}")
    exit(1)
config.substitutions.append(
    ("%opt_printer", f"{tools_dir}/opt -load-pass-plugin={printer_plugin_path}")
)

aflgo_compiler_plugin_path = Path("@AFLGO_COMPILER_PLUGIN_PATH@")
if not aflgo_compiler_plugin_path.is_file():
    print(f"Plugin not found: {aflgo_compiler_plugin_path}")
    exit(1)
config.substitutions.append(
    (
        "%opt_aflgo_compiler",
        f"{tools_dir}/opt -load-pass-plugin={aflgo_compiler_plugin_path}",
    )
)

aflgo_linker_plugin_path = Path("@AFLGO_LINKER_PLUGIN_PATH@")
if not aflgo_linker_plugin_path.is_file():
    print(f"Plugin not found: {aflgo_linker_plugin_path}")
    exit(1)
config.substitutions.append(
    (
        "%opt_aflgo_linker",
        f"{tools_dir}/opt -load-pass-plugin={aflgo_linker_plugin_path}",
    )
)
config.substitutions.append(("%llvm-dis", f"{tools_dir}/llvm-dis"))

python_interpreter = Path("@Python3_EXECUTABLE@")
assert python_interpreter.is_file()

test_cc_wrapper_path = Path("@TEST_CC_WRAPPER_PATH@")
if not test_cc_wrapper_path.is_file():
    print(f"Test wrapper not found: {test_cc_wrapper_path}")
    exit(1)

test_cxx_wrapper_path = Path("@TEST_CXX_WRAPPER_PATH@")
if not test_cxx_wrapper_path.is_file():
    print(f"Test wrapper not found: {test_cxx_wrapper_path}")
    exit(1)

config.substitutions.append(
    (
        "%libaflgo_cc_test",
        f"AFLGO_CLANG={tools_dir}/clang {python_interpreter} {test_cc_wrapper_path} -fno-discard-value-names",
    ),
)
config.substitutions.append(
    (
        "%libaflgo_cxx_test",
        f"AFLGO_CLANG={tools_dir}/clang {python_interpreter} {test_cxx_wrapper_path} -fno-discard-value-names",
    )
)
